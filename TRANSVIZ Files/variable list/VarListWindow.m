function ui = VarListWindow(cdf, option, ui)
% Close old varlist window
if ~isempty(findobj('type','figure','name','Variable List'))
    fP = get(findobj('type','figure','name','Variable List'), 'position');
    position = [fP(1) fP(2) 669 420];
    close(findobj('type','figure','name','Variable List'));
else
    position = [100,100,669,420]; %default window position
end

% all data stored in CDF (other than variable values)
finfo = cdf(option.activeCdfIdx).finfo;

% build table entries for id, name, desc, and units
[varTable, idxRange] = buildTableEntries(finfo, 'single');
% [varTable, idxRange] = buildTableEntries(finfo, 'int8');

% % % % Ideas to finish vectorizing:
% % % fSize={finfo.Variables(1,1:cdfVarCount).Size}';
% % % varSize= cell(cdfVarCount,1);
% % % zones = fSize{1};
% % %     if numel(fSize{j})==1
% % %         varSize{j}=1;
% % %     else
% % %         varSize{j}=fSize{j}(1);
% % %     end

% Loop to read off variable size and dimension values.
% Haven't been able to vectorize this entire loop yet.
for j = idxRange
    % Store variable size information
    tableIdx = j - idxRange(1) + 1;
    jSize = finfo.Variables(1,j).Size;
    if numel(jSize) == 1
        varTable(tableIdx, 4) = {num2str(jSize)};
    elseif  numel(jSize) == 2
        varTable(tableIdx, 4) = {[num2str(jSize(1,1)),' x ',num2str(jSize(1,2))]};
    end
    % store variable dimensions information
    jDim = numel(finfo.Variables(1,j).Dimensions);
    if jDim == 1
        varTable(tableIdx, 5) = {finfo.Variables(1,j).Dimensions(1,1).Name};
    elseif  jDim == 2
        varTable(tableIdx, 5) = {[finfo.Variables(1,j).Dimensions(1,1).Name, ...
            ', ',finfo.Variables(1,j).Dimensions(1,2).Name]};
    end
end

buttonColor = [240 240 240]./255; %gray
ColumnNames = {'VarID','Name','Description','Size','Dimensions','Units'};
htmlString = '<html><div style="color:rgb(24,90,169);font-weight:bold">';

% create varlist figure
ui.varlist.figH = figure(2);
set(ui.varlist.figH,...
    'name','Variable List',...
    'Position',position, ...
    'MenuBar','None');
% create varlist menu
ui.varlist.fileMH = uimenu(ui.varlist.figH,...
    'Label','&File');
ui.varlist.openFMH = uimenu(ui.varlist.fileMH,...
    'Label','&Export Table...', ...
    'callback',@VarListExportCB);
% create varlist table
ui.varlist.tableH = uitable(ui.varlist.figH,...
    'Units','Pixels',...
    'Position', [10,10,649,400],...
    'ColumnWidth', {70 80 220 70 90 100},...
    'ColumnName', ColumnNames,...
    'RowName', [],...
    'tag','1',...
    'data',varTable);
ui.varlist.varidBH = uicontrol(ui.varlist.figH,...
    'Style','pushbutton',...
    'Units','Pixels',...
    'string',[htmlString,'VarID</div>'],...
    'Position',[11,390,69,19],...
    'enable','on',...
    'tag','VarId',...
    'HorizontalAlignment','center');
ui.varlist.nameBH = uicontrol(ui.varlist.figH,...
    'Style', 'pushbutton',...
    'Units','Pixels',...
    'string',[htmlString,'Name</div>'],...
    'Position',[80,390,79,19],...
    'enable','on',...
    'tag','Name',...
    'backgroundColor',buttonColor,...
    'HorizontalAlignment','center');
ui.varlist.descriptionBH = uicontrol(ui.varlist.figH,...
    'Style', 'pushbutton',...
    'Units','Pixels',...
    'string',[htmlString,'Description</div>'],...
    'Position',[160,390,219,19],...
    'enable','on',...
    'tag','Description',...
    'backgroundColor',buttonColor,...
    'HorizontalAlignment','center');
ui.varlist.sizeBH = uicontrol(ui.varlist.figH,...
    'Style', 'pushbutton',...
    'Units','Pixels',...
    'string',[htmlString,'Size</div>'],...
    'Position',[380,390,69,19],...
    'enable','on',...
    'tag','Size',...
    'backgroundColor',buttonColor,...
    'HorizontalAlignment','center');
ui.varlist.dimensionsBH = uicontrol(ui.varlist.figH,...
    'Style', 'pushbutton',...
    'Units','Pixels',...
    'string',[htmlString,'Dimensions</div>'],...
    'Position',[450,390,89,19],...
    'enable','on',...
    'tag','Dimensions',...
    'backgroundColor',buttonColor,...
    'HorizontalAlignment','center');
ui.varlist.unitsBH = uicontrol(ui.varlist.figH,...
    'Style', 'pushbutton',...
    'Units','Pixels',...
    'string',[htmlString,'Units</div>'],...
    'Position',[540,390,100,19],...
    'enable','on',...
    'tag','Units',...
    'backgroundColor',buttonColor,...
    'HorizontalAlignment','center');

try
    % apply java techniques to edit button properties
    buttonEdit(ui.varlist.varidBH);
    buttonEdit(ui.varlist.nameBH);
    buttonEdit(ui.varlist.descriptionBH);
    buttonEdit(ui.varlist.sizeBH);
    buttonEdit(ui.varlist.dimensionsBH);
    buttonEdit(ui.varlist.unitsBH);
catch err %#ok<NASGU>
    %do nothing
end

    function buttonEdit(handle)
        jButton = java(findjobj(handle));
        jButton.setCursor(java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton.setFlyOverAppearance(true);
    end

    function [varTable, idxRange] = buildTableEntries(finfo, dataType)
        % This function does not yet build the entire table; variable sizes
        % and dimensions are read off in a subsequent loop.
        % This function represents a vectorized alternative to reading off
        % table values using a loop. The vectorized approach is many times
        % faster than the loop approach.
        
        % extract data type of each variable in CDF (either single or int8).
        % single variables have data that can be plotted.
        % int8 are pointer variables and do not contain data.
        varDataTypes = {finfo.Variables(:).Datatype};
        
        % logical array of all variables of type specified by dataType
        typeArray = strncmp(varDataTypes, dataType, 6);
        
        % initial and final idx of matched variable type
        minIdx = find(typeArray,1);
        maxIdx = find(typeArray,1, 'last');
        
        % create idx ranges for reading CDF data
        idxRange = minIdx:maxIdx;
        
        switch dataType
            case 'single'
                idxScale = idxRange*2;
            case 'int8'
                idxScale = idxRange*3;
        end
        idxShift = idxScale - idxScale(1) + 1;
        
        % preallocate cell for storing table data of single variables
        varTable = cell(numel(idxRange), 6);
        
        % store variable IDs for table presentation
        varTable(:,1) = strtrim(cellstr(num2str(idxRange')));
        
        % store variable names for table presentation
        varTable(:,2) = {finfo.Variables(idxRange).Name}';
        
        % store variable descriptions and units for table presentation
        fAttributes = [finfo.Variables(idxRange).Attributes];
        varTable(:,3) = deblank({fAttributes(idxShift+1).Value}');
        varTable(:,6) = deblank({fAttributes(idxShift).Value}');
    end

    function VarListExportCB(varargin)
       tableData = get(ui.varlist.tableH, 'data');
       VarListExport(option, ui, tableData, ColumnNames); 
    end

end