function ui = BuildUI(option, variable)
%% Create user interface (ui)
ui = struct;
%% main interface components
ui.main.figH = figure(  ...
    'name', 'TRANSVIZ', ...
    'menubar', 'none', ...
    'Units' , 'Pixels'    , ...
    'toolbar', 'none', ...
    'Position', option.figSize, ...
    'renderer', 'opengl', ...
    'DefaultTextInterpreter', 'TeX');
ui.main.axesH = axes( ...
    'Units', 'Pixels', ...
    'visible', 'off');
ui.main.activeCdfH = uicontrol( ...
    'Style', 'popupmenu', ...
    'String', option.cdfList, ...
    'Units', 'Pixels', ...
    'BackgroundColor', [1 1 1], ...
    'enable', 'off', ...
    'HorizontalAlignment', 'left');
ui.main.splashH = uicontrol( ...
    'style', 'edit', ...
    'BackgroundColor', [1 1 1], ...
    'max', 5);
ui.main.systemMsgH = uicontrol(...
    'Style', 'text', ...
    'Units', 'Pixels', ...
    'HorizontalAlignment', 'center', ...
    'fontsize', 9);
ui.main.plotTimeH = text(...
    1, 1, '', ...
    'units', 'pixels', ...
    'horiz', 'right', ...
    'vert', 'baseline', ...
    'fontsize', 9);
% text headings
textHeaderNames = {'Active CDF:', 'Variable Entry:', 'Active CDF:'};
for j = 1:numel(textHeaderNames)
    ui.main.textHeaderH(j) = uicontrol( ...
        'Style', 'text', ...
        'Units', 'Pixels', ...
        'HorizontalAlignment', 'left', ...
        'enable', 'off', ...
        'String', textHeaderNames{j}, ...
        'FontWeight', 'bold');
end
% entry box components
for j = 1:numel(variable)
    ui.main.entryLabelH(j) = uicontrol(...
        'Style', 'text', ...
        'Units', 'Pixels', ...
        'enable', 'off', ...
        'HorizontalAlignment', 'left', ...
        'String', [num2str(j), ')']);
    ui.main.entryHelpH(j) = uicontrol(...
        'Style', 'pushbutton', ...
        'String', '+', ...
        'Units', 'Pixels', ...
        'FontWeight', 'bold', ...
        'HorizontalAlignment', 'left');
    ui.main.entryBoxH(j) = uicontrol(...
        'style', 'edit', ...
        'string' , '', ...
        'tag', num2str(j), ...
        'BackgroundColor', [1 1 1], ...
        'enable', 'off');
end
% slider components
ui.main.sliderH = uicontrol( ...
    'Style', 'Slider', ...
    'Units', 'Pixels', ...
    'Min', 1, ...
    'Max', 10, ...
    'Value', option.slider.value , ...
    'enable', 'off');
ui.main.sliderModeH = uibuttongroup(...
    'visible', 'on', ...
    'units', 'pixels', ...
    'bordertype', 'none', ...
    'SelectedObject', []);
sliderButtonNames = {'Time', 'Position'};
for j = 1:numel(sliderButtonNames)
    ui.main.sliderModeB(j) = uicontrol( ...
        'style', 'toggle', ...
        'units', 'pixels', ...
        'string', sliderButtonNames{j}, ...
        'parent', ui.main.sliderModeH, ...
        'enable', 'off');
end
%% line context menu components
lineColor = { ...
    'Blue', 'Orange', 'Yellow', ...
    'Purple',  'Green', 'Red',  ...
    'Cyan', 'Brown', 'Light Gray', ...
    'Dark Gray', 'Black'};
lineThickness = { ...
    '0.50', '1.00', '1.25', ...
    '1.50', '1.75', '2.00', ...
    '2.50', '3.00', '4.00', '5.00'};
lineStyle = {'-', '-.', '--', ':', 'None'};
markerStyle = { ...
    '+', 'o', '*', '.', ...
    'x', 's', 'd', '^', ...
    '>', '<', 'p', 'h', 'None'};
markerSize = {'4', '5', '6', '8', '10', '12', '15'};
markerFill = lineColor;
% loop for setting line menus (a different context menu for each line)
for i = 1:numel(variable)
    % tag is later used to figure out what line the context menu call
    % belongs to.
    ui.line(i).menuH = uicontextmenu('tag', num2str(i));
    % Define the context menu items
    ui.line(i).colorMH = uimenu(ui.line(i).menuH, 'Label', 'Line Color');
    ui.line(i).styleMH = uimenu(ui.line(i).menuH, 'Label', 'Line Style');
    ui.line(i).thickMH = uimenu(ui.line(i).menuH, 'Label', 'Line Thickness');
    ui.line(i).markerMH = uimenu(ui.line(i).menuH, 'Label', 'Marker Style');
    ui.line(i).sizeMH = uimenu(ui.line(i).menuH, 'Label', 'Marker Size');
    ui.line(i).fillMH = uimenu(ui.line(i).menuH, 'Label', 'Marker Fill Color');
    % line menu item options
    for j = 1:numel(lineColor)
        ui.line(i).colorH(j) = uimenu(ui.line(i).colorMH, 'Label', lineColor{j});
    end
    for j = 1:numel(lineThickness)
        ui.line(i).thickH(j) = uimenu(ui.line(i).thickMH, 'Label', lineThickness{j});
    end
    for j = 1:numel(lineStyle)
        ui.line(i).styleH(j) = uimenu(ui.line(i).styleMH, 'Label', lineStyle{j});
    end
    for j = 1:numel(markerStyle)
        ui.line(i).markerH(j) = uimenu(ui.line(i).markerMH, 'Label', markerStyle{j});
    end
    for j = 1:numel(markerSize)
        ui.line(i).sizeH(j) = uimenu(ui.line(i).sizeMH, 'Label', markerSize{j});
    end
    for j = 1:numel(markerFill)
        ui.line(i).fillH(j) = uimenu(ui.line(i).fillMH, 'Label', markerFill{j});
    end
    ui.line(i).fillH(j+1) = uimenu(ui.line(i).fillMH, 'Label', 'None');
    set(ui.main.entryHelpH(i), 'uicontextmenu', ui.line(i).menuH);
end
%% main top menu components
ui.menu.fileMH = uimenu(ui.main.figH, 'Label', '&File');
ui.menu.openFMH = uimenu(ui.menu.fileMH, 'Label', '&Open CDF...');
ui.menu.exportFigureMH = uimenu(ui.menu.fileMH, ...
    'Label', 'Export &Figure', ...
    'separator', 'on', 'enable', 'off');
ui.menu.exportDataMH = uimenu(ui.menu.fileMH, ...
    'Label', 'Export &Data', 'enable', 'off');
ui.menu.editMH = uimenu(ui.main.figH, ...
    'Label', '&Edit', 'enable', 'off');
ui.menu.plotModeMH = uimenu(ui.menu.editMH, 'Label', '&Plot Mode');
plotModes = {'&Line Plot', '&Surface Plot'};
for j = 1:numel(plotModes)
    ui.menu.plotModeH(j) = uimenu(ui.menu.plotModeMH, ...
        'Label', plotModes{j});
end
ui.menu.rendererMH = uimenu(ui.menu.editMH, ...
    'Label', '&Renderer');
rendererModes = {'&OpenGL', '&Painters'};
for j = 1:numel(rendererModes)
    ui.menu.rendererH(j) = uimenu(ui.menu.rendererMH, ...
        'Label', rendererModes{j});
end
% surface plot menu options
ui.menu.surfaceGridMH = uimenu(ui.menu.editMH, ...
    'Label', 'Surface &Grid Lines', ...
    'visible', 'off', 'separator', 'on');
ui.menu.surfaceBoxMH = uimenu(ui.menu.editMH, ...
    'Label', 'Surface &Box', 'visible', 'off');
stateOptions = {'O&n', 'O&ff'};
for j = 1:numel(stateOptions)
    ui.menu.surfaceGridH(j) = uimenu(ui.menu.surfaceGridMH, ...
        'Label', stateOptions{j});
    ui.menu.surfaceBoxH(j) = uimenu(ui.menu.surfaceBoxMH, ...
        'Label', stateOptions{j});
end
ui.menu.surfaceStyleMH = uimenu(ui.menu.editMH, ...
    'Label', '&Surface Style', 'visible', 'off');
surfaceStyles = {'&Surface Texture', '&Surface Grid', '&Mesh Grid'};
for j = 1:numel(surfaceStyles)
    ui.menu.surfaceStyleH(j) = ...
        uimenu(ui.menu.surfaceStyleMH, 'Label', surfaceStyles{j});
end
ui.menu.colorMapMH = uimenu(ui.menu.editMH, ...
    'Label', '&Color Map', 'visible', 'off');
colorMaps = {'&Paruly', '&Jet', 'Hs&v', '&Bone', '&Hot', '&Cool'};
for j = 1:numel(colorMaps)
    ui.menu.colorMapH(j) = uimenu(ui.menu.colorMapMH, 'Label', colorMaps{j});
end
% line plot menu options
ui.menu.lineBoxMH = uimenu(ui.menu.editMH, ...
    'Label', 'Axes &Box', 'separator', 'on');
ui.menu.lineBoxH(1) = uimenu(ui.menu.lineBoxMH, 'Label', 'O&n');
ui.menu.lineBoxH(2) = uimenu(ui.menu.lineBoxMH, 'Label', 'O&ff');
ui.menu.lineGridMH = uimenu(ui.menu.editMH, 'Label', '&Grid Lines');
ui.menu.lineGridH(1) = uimenu(ui.menu.lineGridMH, 'Label', 'O&n');
ui.menu.lineGridH(2) = uimenu(ui.menu.lineGridMH, 'Label', 'O&ff');
ui.menu.legendLocationMH = ...
    uimenu(ui.menu.editMH, 'Label', '&Legend Location');
legendLocations = {'&NorthEast', 'North&West', 'South&East', '&SouthWest'};
for j = 1:numel(legendLocations)
ui.menu.legendLocationH(j) = uimenu(ui.menu.legendLocationMH, ...
    'Label', legendLocations{j});
end
ui.menu.toolsMH = uimenu(ui.main.figH, ...
    'Label', '&Tools', 'enable', 'off');
% disabled because after switching to and from surface plot mode, the reset
% view option would cause a 3d rotation in the 2d plot.  The user can just
% reset the view by replotting a variable instead in 2d, if needed.
% ui.menu.ResetViewH=uimenu(ui.menu.toolsMH, 'Label', '&Reset View');
ui.menu.ZoomInH=uimenu(ui.menu.toolsMH,  'Label', '&Zoom In');
ui.menu.PanH=uimenu(ui.menu.toolsMH, 'Label', '&Pan');
ui.menu.windowMH = uimenu(ui.main.figH, ...
    'Label', '&Window', 'enable', 'off');
ui.menu.varListH=uimenu(ui.menu.windowMH, 'Label', '&Variable List');
ui.menu.pointerListH=uimenu(ui.menu.windowMH, 'Label', '&Pointer List');
ui.menu.consoleMH = uimenu(ui.menu.windowMH, ...
    'Label', '&Console', 'separator', 'on');
%% Additional Gui initializations
% Set Background Color of relevant uicontrols
SetBackgroundColor(ui, 'gray');
% printing options
set(ui.main.figH, 'InvertHardCopy', 'off');
set(0, 'DefaultFigureInvertHardcopy', 'on')
set(ui.main.figH, 'PaperPositionMode', 'auto');
% greatly speedup slider updates when legends are displayed
setappdata(gca, 'LegendColorbarManualSpace', 1);
setappdata(gca, 'LegendColorbarReclaimSpace', 1);
% modify tooltip properties
tm = javax.swing.ToolTipManager.sharedInstance; %static method to get ToolTipManager object
javaMethodEDT('setInitialDelay', tm, 0); %set tooltips to appear immediately
javaMethodEDT('setDismissDelay', tm, 600000); %tootips disappear after 10min.
end
